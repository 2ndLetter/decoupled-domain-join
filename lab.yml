AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template Sample template EIP_With_Association: This
  template shows how to associate an Elastic IP address with an Amazon EC2
  instance - you can use this same technique to associate an EC2 instance with
  an Elastic IP Address that is not created inside the template by replacing the
  EIP reference in the AWS::EC2::EIPAssoication resource type with the IP
  address of the external EIP. **WARNING** This template creates an Amazon EC2
  instance and an Elastic IP Address. You will be billed for the AWS resources
  used if you create a stack from this template.
Parameters:
  ImageId:
    Description: AMI ID
    Type: AWS::EC2::Image::Id
  InstanceType:
    Description: Server EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t2.micro
      - t2.medium
      - t3.micro
      - t3.medium
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:

  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: "lab"
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -ex
            
            # Send logs to console
            #exec >>(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            
            # Install dependencies
            dnf install -y unzip wget python3 vim jq

            # Install aws cli
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
            
            # Install cnf bootstrap
            mkdir -p /opt/aws/bin
            wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz

            dnf install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            systemctl enable amazon-ssm-agent
            systemctl start amazon-ssm-agent
            systemctl status amazon-ssm-agent

            # Install Chef Client
            curl -L https://omnitruck.chef.io/install.sh | bash || error_exit 'could not install chef'

            # Create user & add to wheel group
            useradd -mG wheel bootstrap
            
            # Add NOPASSWD to wheel group
            echo '%wheel ALL=(ALL)    NOPASSWD: ALL' | sudo EDITOR='tee -a' visudo

            # Create ssh keys
            runuser -l bootstrap -c "ssh-keygen -q -t rsa -N '' -f /home/bootstrap/.ssh/bootstrap <<<y >/dev/null 2>&1"
            
            # Upload private key to s3
            S3Bucket=$(aws cloudformation list-exports --query "Exports[?Name=='cfn-stack-environment-S3Bucket'].Value" --output text)
            aws s3 cp /home/bootstrap/.ssh/bootstrap s3://$S3Bucket/

            # Upload AD Credentials to s3
            echo "P@$$Word123!" > 

            #/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}

            #'Fn::Join':
            #  - ''
            #  - - IPAddress=
            #    - !Ref IPAddress
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      ImageId: !Ref ImageId
      IamInstanceProfile: !Ref EC2InstanceProfile
      InstanceType: !Ref InstanceType
      Tags:
        - Key: "Name"
          Value: "RHEL_Server"
    #CreationPolicy:
    #  ResourceSignal:
    #    Count: 1
    #    Timeout: PT60M
  
  EC2InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonS3FullAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/SecretsManagerReadWrite
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AWSCloudFormationReadOnlyAccess

  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
        - !Ref EC2InstanceRole

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation

  IPAddress:
    Type: 'AWS::EC2::EIP'

  IPAssoc:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      InstanceId: !Ref EC2Instance
      EIP: !Ref IPAddress

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
  InstanceIPAddress:
    Description: IP address of the newly created EC2 instance
    Value: !Ref IPAddress
