AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Enviornment for the "lab"

Parameters:
  ImageId:
    Description: AMI ID
    Type: AWS::EC2::Image::Id
  InstanceType:
    Description: Server EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t2.micro
      - t2.medium
      - t3.micro
      - t3.medium
  VpcId:
    Description: VPC
    Type: "AWS::EC2::VPC::Id"
  SubnetIDs:
    Description: Subnets
    Type: "List<AWS::EC2::Subnet::Id>"
  Password:
    Description: Password
    Type: String
  RDPLocation:
    Description: The IP address range that can be used to RDP to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  RouteTable:
    Description: Route Table Id
    Type: String

Resources:
  s3bucket:
    Type: 'AWS::S3::Bucket'

  ActiveDirectory:
    Type: AWS::DirectoryService::MicrosoftAD
    Properties:
      Edition: Standard
      Name: "lab.example.com"
      Password: !Ref Password
      ShortName: lab
      VpcSettings: 
        SubnetIds: !Ref SubnetIDs
        VpcId:
          Ref: VpcId

  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: "lab"
      UserData:
        Fn::Base64: !Sub |
            $progressPreference = 'silentlyContinue'
            Invoke-WebRequest `
                https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe `
                -OutFile $env:USERPROFILE\Desktop\SSMAgent_latest.exe
            Start-Process `
                -FilePath $env:USERPROFILE\Desktop\SSMAgent_latest.exe `
                -ArgumentList "/S"
            rm -Force $env:USERPROFILE\Desktop\SSMAgent_latest.exe
            Restart-Service AmazonSSMAgent

            # Start PowerShell Here

      SecurityGroups:
        - !Ref InstanceSecurityGroup
      ImageId: !Ref ImageId
      IamInstanceProfile: !Ref EC2InstanceProfile
      InstanceType: !Ref InstanceType
      Tags:
        - Key: "Name"
          Value: "Windows_Server"
    #CreationPolicy:
    #  ResourceSignal:
    #    Count: 1
    #    Timeout: PT15M

  EC2InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonS3FullAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AWSCloudFormationReadOnlyAccess

  #LambdaFunctionRole:
  #  Type: 'AWS::IAM::Role'
  #  Properties:
  #    AssumeRolePolicyDocument:
  #      Version: 2012-10-17
  #      Statement:
  #        - Effect: Allow
  #          Principal:
  #            Service: lambda.amazonaws.com
  #          Action: ['sts:AssumeRole']
  #    Path: /
  #    ManagedPolicyArns:
  #      - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess

  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
        - !Ref EC2InstanceRole

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable RDP access
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: !Ref RDPLocation

  #LambdaSecurityGroup:
  #  Type: 'AWS::EC2::SecurityGroup'
  #  Properties:
  #    GroupDescription: Enable Lambda access
  #    SecurityGroupIngress:
  #      - IpProtocol: -1
  #        FromPort: '-1'
  #        ToPort: '-1'
  #        CidrIp: !Ref RDPLocation

  S3GatewayEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      RouteTableIds:
        - !Ref RouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VpcId

  #Function:
  #  Type: AWS::Lambda::Function
  #  Properties:
  #    FunctionName: lambda
  #    Handler: lambda_function.lambda_handler
  #    Role: !GetAtt LambdaFunctionRole.Arn
  #    Code:
  #      S3Bucket: !Ref s3bucket
  #      S3Key: python_function.zip
  #    Runtime: python3.9
  #    Timeout: 45
  #    VpcConfig:
  #      SecurityGroupIds:
  #        - !GetAtt LambdaSecurityGroup.GroupId
  #      #SubnetIds: !Ref SubnetIDs
  #        #- subnet-071f712345678e7c8
  #        #- subnet-07fd123456788a036

Outputs:
  s3bucket:
    Description: S3 bucket name
    Value: !Ref s3bucket
    Export:
      Name: !Sub "${AWS::StackName}-s3bucket"
  InstanceSecurityGroup:
    Description: Windows Server Security Group
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-InstanceSecurityGroup"
  EC2InstanceProfile:
    Description: Windows ec2 Instance Profile
    Value: !Ref EC2InstanceProfile
    Export:
      Name: !Sub "${AWS::StackName}-EC2InstanceProfile"