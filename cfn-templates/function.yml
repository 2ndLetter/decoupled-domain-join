AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS Lambda Function

Parameters:
  SubnetIDs:
    Description: Subnets
    Type: "List<AWS::EC2::Subnet::Id>"

Resources:
  LambdaFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess

  LambdaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable Lambda access
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0

  Function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: lambda
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Code:
        S3Bucket: !ImportValue cfn-stack-environment-s3bucket
        S3Key: python_function.zip
      Runtime: python3.9
      Timeout: 45
      Layers:
        - !Ref FunctionLayer
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds: !Ref SubnetIDs

  FunctionLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: !ImportValue cfn-stack-environment-s3bucket
        S3Key: python_layer.zip
      Description: paramiko layer
      LayerName: paramiko-layer
      LicenseInfo: MIT